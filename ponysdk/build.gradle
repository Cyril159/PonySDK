ext {
    srcCore = "src-core/main/java"
    srcTerminal = "src-core/main/java/com/ponysdk/ui/terminal"
    srcDefaultimpl = "src-defaultimpl/main/java"
    resourcesCoreTest = "src-core/test/resources"
    gwtOutputDirName = buildDir.name + "/gwt"
    buildInfoOutputDirName = buildDir.name + "/buildinfo"
    warResources = "src-core/main/resources/war"
    confResources = "src-core/main/resources/conf"
    scriptResources = "src-core/main/resources/script"
    javadocResources = "src-core/main/javadoc"
}

sourceSets {
    main {
        java {
            srcDir srcCore
            srcDir srcDefaultimpl
        }
    }
    test {
        java {
            srcDir "src-core/test/java"
        }
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://github.com/PonySDK/Maven/raw/master/ext"
    }
    maven {
        url "http://oss.sonatype.org/content/repositories/snapshots"
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://localhost/tmp/my-maven-repo/")
            pom.groupId = 'com.ponysdk'
            pom.artifactId = 'ponysdk'
        }
    }
}

configurations.all {
    transitive = false
}

configurations {
    xjc
    gwt
    spring
    sl4j
    commons
    selenium
    asm
    json
    jetty
    gwtdev

    compile {
        extendsFrom jetty, commons, gwt, spring, sl4j, json
    }

    testCompile {
        extendsFrom selenium
    }

    runtime {
        extendsFrom spring, sl4j, asm, gwtdev
    }

}

dependencies {
    xjc 'com.sun.xml.bind:jaxb-xjc:2.2.4'

    gwt 'com.google.gwt:gwt-user:2.8.0-beta1'
    gwt 'com.google.gwt:gwt-codeserver:2.8.0-beta1'
    gwt 'javax.validation:validation-api:1.0.0.GA@jar'
    gwt 'com.google.gwt:gwt-elemental:2.8.0-beta1'
    gwt 'org.ow2.asm:asm:5.0.4'

    gwtdev 'com.google.gwt:gwt-dev:2.8.0-beta1'

    spring 'org.springframework:spring-core:4.1.4.RELEASE'
    spring 'org.springframework:spring-web:4.1.4.RELEASE'
    spring 'org.springframework:spring-beans:4.1.4.RELEASE'
    spring 'org.springframework:spring-context:4.1.4.RELEASE'

    sl4j 'org.slf4j:slf4j-api:1.7.12'
    sl4j 'org.slf4j:log4j-over-slf4j:1.7.12'
    sl4j 'ch.qos.logback:logback-core:1.1.3'
    sl4j 'ch.qos.logback:logback-classic:1.1.3'
    sl4j 'org.slf4j:jcl-over-slf4j:1.7.12'

    commons 'commons-beanutils:commons-beanutils:1.8.3'
    commons 'commons-lang:commons-lang:2.6'

    selenium 'org.seleniumhq.selenium:selenium-java:2.33.0'
    selenium 'junit:junit:4.10'

    jetty 'org.eclipse.jetty:jetty-server:9.2.12.v20150709'
    jetty 'org.eclipse.jetty:jetty-servlet:9.2.12.v20150709'
    jetty 'org.eclipse.jetty:jetty-webapp:9.2.12.v20150709'
    jetty 'org.eclipse.jetty:jetty-servlets:9.2.12.v20150709'
    jetty 'org.eclipse.jetty.websocket:websocket-server:9.2.12.v20150709'
    jetty 'org.eclipse.jetty.websocket:websocket-common:9.2.12.v20150709'
    jetty 'org.eclipse.jetty.websocket:javax-websocket-server-impl:9.2.12.v20150709'
    jetty 'org.eclipse.jetty:jetty-client:9.2.12.v20150709'
    jetty 'org.eclipse.jetty:jetty-io:9.2.12.v20150709'
    jetty 'org.eclipse.jetty:jetty-util:9.2.12.v20150709'
    jetty 'org.eclipse.jetty:jetty-http:9.2.12.v20150709'
    jetty 'org.eclipse.jetty:jetty-security:9.2.12.v20150709'
    jetty 'org.eclipse.jetty:jetty-continuation:9.2.12.v20150709'

    jetty 'org.eclipse.jetty.websocket:websocket-api:9.2.12.v20150709'
    jetty 'org.eclipse.jetty.websocket:websocket-servlet:9.2.12.v20150709'

    jetty 'org.apache.geronimo.specs:geronimo-servlet_3.0_spec:1.0'
    jetty 'javax.servlet:javax.servlet-api:3.1.0'

    asm 'org.ow2.asm:asm:5.0.3'

    json 'javax.json:javax.json-api:1.0'
    json 'org.glassfish:javax.json:1.0.4'
}


jar {
    baseName = 'ponysdk'
    from sourceSets.main.output
    from sourceSets.test.output
    from gwtOutputDirName
    from warResources

    metaInf {
        from 'src-core/main/resources/META-INF'
        from buildInfoOutputDirName
    }
    into('conf') {
        from confResources
    }
    into('script') {
        from scriptResources
    }

    manifest {
        def cmd = "git rev-parse HEAD"
        def proc = cmd.execute()
        ext.revision = proc.text.trim()
        ext.timestamp = (int) (new Date().getTime() / 1000)

        attributes("Manifest-Version": "1.0")
        attributes("Created-By": "PonySDK")
        attributes("Built-By": "PonySDK")
        attributes("License-Title": "Apache License 2.0")
        attributes("Specification-Title": "PonySDK")
        attributes("Specification-Version": version)
        attributes("Specification-Vendor": "PonySDK")
        attributes("Implementation-Title": "PonySDK")
        attributes("Implementation-Version": version)
        attributes("Implementation-Vendor-Id": "com.ponysdk")
        attributes("Implementation-Vendor": "PonySDK")
        attributes("Revision": revision)
        attributes("Date": timestamp + " / " + new Date().toGMTString())
    }
}


javadoc {
    failOnError false
}


task compileTerminal << {
    def result = System.getProperty('gwtc', 'true')
    println('gwtc ? ' + result)
    if (result == 'false') {
        println('[WARN] terminal compilation disabled');
    } else {
        tasks.gwtc.execute();
    }
}

task gwtc {
    description = 'GWT compile'
    inputs.files fileTree(srcTerminal)
    outputs.files fileTree(gwtOutputDirName)
    doLast {
        javaexec {
            main = 'com.google.gwt.dev.Compiler'
            maxHeapSize = '512M'
            workingDir = buildDir
            classpath {
                [
                        sourceSets.main.java.srcDirs,
                        sourceSets.main.output,
                        configurations.gwt,
                        configurations.gwtdev
                ]
            }
            args = [
                    '-war',
                    'gwt',
                    '-localWorkers',
                    Runtime.getRuntime().availableProcessors(),
                    'com.ponysdk.ui.PonyTerminal'
            ]
        }
    }
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
    from sourceSets.test.allJava

    from(srcCore) {
        include '**/*.xml'
    }

    manifest {
        def cmd = "git rev-parse HEAD"
        def proc = cmd.execute()
        ext.revision = proc.text.trim()
        ext.timestamp = (int) (new Date().getTime() / 1000)

        attributes("Manifest-Version": "1.0")
        attributes("Created-By": "PonySDK")
        attributes("Built-By": "PonySDK")
        attributes("License-Title": "Apache License 2.0")
        attributes("Specification-Title": "PonySDK")
        attributes("Specification-Version": version)
        attributes("Specification-Vendor": "PonySDK")
        attributes("Implementation-Title": "PonySDK")
        attributes("Implementation-Version": version)
        attributes("Implementation-Vendor-Id": "com.ponysdk")
        attributes("Implementation-Vendor": "PonySDK")
        attributes("Revision": revision)
        attributes("Classifier": "sources")
        attributes("Date": timestamp + " / " + new Date().toGMTString())
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    /**
     title = 'PonySDK javadoc'
     excludes = ['com.ponysdk.ui.terminal']
     doLast {copy {from javadocResources
     into buildDir.name + '/docs/javadoc';}}**/

    manifest {
        def cmd = "git rev-parse HEAD"
        def proc = cmd.execute()
        ext.revision = proc.text.trim()
        ext.timestamp = (int) (new Date().getTime() / 1000)

        attributes("Manifest-Version": "1.0")
        attributes("Created-By": "PonySDK")
        attributes("Built-By": "PonySDK")
        attributes("License-Title": "Apache License 2.0")
        attributes("Specification-Title": "PonySDK")
        attributes("Specification-Version": version)
        attributes("Specification-Vendor": "PonySDK")
        attributes("Implementation-Title": "PonySDK")
        attributes("Implementation-Version": version)
        attributes("Implementation-Vendor-Id": "com.ponysdk")
        attributes("Implementation-Vendor": "PonySDK")
        attributes("Revision": revision)
        attributes("Classifier": "javadocs")
        attributes("Date": timestamp + " / " + new Date().toGMTString())
    }
}

test {
    classpath = files(resourcesCoreTest, gwtOutputDirName) + classpath
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        }
    }
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar
    archives javadocJar
}


def copyLib(configurations, dest) {
    println 'copying libs to #' + dest
    copy {
        from configurations
        into dest
        rename '(.*)-(.*).jar', '$1.jar'
    }
}

task copyAllLibs << {
    copyLib(configurations.gwt, 'libs/gwt');
    copyLib(configurations.spring, 'libs/spring');
    copyLib(configurations.sl4j, 'libs/logging');
    copyLib(configurations.selenium, 'libs/tests');
    copyLib(configurations.jetty, 'libs/jetty');
    copyLib(configurations.commons, 'libs/commons');
    copyLib(configurations.asm, 'libs/asm');
    copyLib(configurations.json, 'libs/json');
    copyLib(configurations.gwtdev, 'libs/gwtdev');
}

task sendTo(type: Copy) {
    def outputdir = System.getProperty("jar.destination", ".");
    println('copying jars to: ' + outputdir)

    from file("$buildDir/libs")
    into file(outputdir)
}

jar.dependsOn(compileTerminal)
assemble.dependsOn(copyAllLibs)
