ext{
	srcSample = 'src/main/java'
	srcGenerated = 'src-generated/main/java'
	srcTrading = 'src-trading/main/java'
	ponysdkPath = project.rootDir.path + '/../' + 'ponysdk'
	packageOutputDirName = buildDir.name + '/package'
}

repositories {
    mavenCentral()
    maven {
    	url "https://github.com/PonySDK/Maven/raw/master/ext"
	}
	maven {
        url "http://oss.sonatype.org/content/repositories/snapshots"
    }
}

configurations {
	java2html
	compile {
		extendsFrom java2html
	}
	runtime {
		extendsFrom java2html
	}
}

dependencies {
	java2html 'de.java2html:java2html:5.0'
	compile project(':ponysdk')
	compile fileTree (dir: 'libs', includes: ['*.jar']) 
	runtime project(':ponysdk')
}

sourceSets {
	main {
		java {
			srcDir srcSample
			srcDir srcGenerated
			srcDir srcTrading
		}
	}
}

task cleanGenerated(type: Delete){
  delete srcGenerated
}

task cleanDebug(type: Delete) {
  delete 'debug'
}

task generateServices{
}

task generateSkeleton(type: JavaExec) {
	description = 'Generate skeletons'
	main = 'com.ponysdk.generator.Generator'
	inputs.dir file('src/main/resources/spec')
	outputs.dir file(srcGenerated)
	classpath {
		[
			project(':ponysdk').sourceSets.main.output,
			project(':ponysdk').configurations.sl4j
		]
	}
	args = [
		'src/main/resources/spec',
		srcGenerated
		]
}

task generateProxyBuilder(type: JavaExec) {
	description = 'Generate spring proxybuilder'
	main = 'com.ponysdk.spring.ProxyBuilderGenerator'
	inputs.dir file('src/main/resources/spec')
	outputs.dir file(srcGenerated)
	classpath {
		[
			project(':ponysdk').sourceSets.main.output,
			project(':ponysdk').configurations.sl4j,
			project(':ponysdk').configurations.spring
		]
	}
	args = [
		'src/main/resources/spec',
		srcGenerated
		]
}

task generateSkeleton2(type: JavaExec) {
	description = 'Generate skeletons trading sample'
	main = 'com.ponysdk.generator.Generator'
	inputs.dir file('src-trading/main/resources/spec')
	outputs.dir file(srcGenerated)
	classpath {
		[
			project(':ponysdk').sourceSets.main.output,
			project(':ponysdk').configurations.sl4j
		]
	}
	args = [
		'src-trading/main/resources/spec',
		srcGenerated
		]
}

task copyAllLibs << {
	project(':ponysdk').copyLib(configurations.java2html, 'libs/java2html');
}

/**
task createPackage << {

	project.ext.ponysdkWarResourcesPath = ponysdkPath + '/' + project(':ponysdk').warResources

	println 'Building war'
	println 'ponysdk path: ' + ponysdkPath
	println 'ponysdk war path: ' + ponysdkWarResourcesPath
	
	
	copy {
		from configurations.java2html
		from project(':ponysdk').configurations.sl4j
		from project(':ponysdk').configurations.spring
		from project(':ponysdk').configurations.gwt
		from project(':ponysdk').buildDir.path + '/libs'
		into packageOutputDirName + '/lib'
	}
	copy {
		from sourceSets.main.java
		from sourceSets.main.output
		into packageOutputDirName + '/war/WEB-INF/classes'
	}
	copy {
		from 'etc'
		into packageOutputDirName + '/etc'
	}
	copy {
		from ponysdkWarResourcesPath
		into packageOutputDirName + '/war'
	}

	delete packageOutputDirName + '/start.bat'
	delete packageOutputDirName + '/start.sh'

	def f = new File(packageOutputDirName + '/start.bat')
	def writer = f.newWriter("UTF-8", true)
	writer.write("java -server -cp .;etc/;lib/* com.ponysdk.core.main.Main port=8081 contextName=sample war=war/\n")
	writer.write("pause\n")
	writer.close()

	f = new File(packageOutputDirName + '/start.sh')
	writer = f.newWriter("UTF-8", true)
	writer.write("java -server -cp .:etc/:lib/* com.ponysdk.core.main.Main port=8081 contextName=sample war=war/\n")
	writer.close()
}
**/

jar {
	/*doLast {
		tasks.createPackage.execute()
	}*/
}

assemble.dependsOn(copyAllLibs)
generateServices.dependsOn(generateSkeleton)
generateServices.dependsOn(generateSkeleton2)
generateServices.dependsOn(generateProxyBuilder)
compileJava.dependsOn(generateServices)
generateServices.dependsOn(cleanGenerated)
